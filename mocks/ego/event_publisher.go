// Code generated by mockery. DO NOT EDIT.

package ego

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	egopb "github.com/tochemey/ego/v3/egopb"
)

// EventPublisher is an autogenerated mock type for the EventPublisher type
type EventPublisher struct {
	mock.Mock
}

type EventPublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *EventPublisher) EXPECT() *EventPublisher_Expecter {
	return &EventPublisher_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: _a0
func (_m *EventPublisher) Close(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EventPublisher_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type EventPublisher_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *EventPublisher_Expecter) Close(_a0 interface{}) *EventPublisher_Close_Call {
	return &EventPublisher_Close_Call{Call: _e.mock.On("Close", _a0)}
}

func (_c *EventPublisher_Close_Call) Run(run func(_a0 context.Context)) *EventPublisher_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *EventPublisher_Close_Call) Return(_a0 error) *EventPublisher_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventPublisher_Close_Call) RunAndReturn(run func(context.Context) error) *EventPublisher_Close_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with no fields
func (_m *EventPublisher) ID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// EventPublisher_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type EventPublisher_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *EventPublisher_Expecter) ID() *EventPublisher_ID_Call {
	return &EventPublisher_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *EventPublisher_ID_Call) Run(run func()) *EventPublisher_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EventPublisher_ID_Call) Return(_a0 string) *EventPublisher_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventPublisher_ID_Call) RunAndReturn(run func() string) *EventPublisher_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: ctx, event
func (_m *EventPublisher) Publish(ctx context.Context, event *egopb.Event) error {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *egopb.Event) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EventPublisher_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type EventPublisher_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - event *egopb.Event
func (_e *EventPublisher_Expecter) Publish(ctx interface{}, event interface{}) *EventPublisher_Publish_Call {
	return &EventPublisher_Publish_Call{Call: _e.mock.On("Publish", ctx, event)}
}

func (_c *EventPublisher_Publish_Call) Run(run func(ctx context.Context, event *egopb.Event)) *EventPublisher_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*egopb.Event))
	})
	return _c
}

func (_c *EventPublisher_Publish_Call) Return(_a0 error) *EventPublisher_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventPublisher_Publish_Call) RunAndReturn(run func(context.Context, *egopb.Event) error) *EventPublisher_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// NewEventPublisher creates a new instance of EventPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventPublisher {
	mock := &EventPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
