// Code generated by mockery. DO NOT EDIT.

package ego

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	egopb "github.com/tochemey/ego/v3/egopb"
)

// StatePublisher is an autogenerated mock type for the StatePublisher type
type StatePublisher struct {
	mock.Mock
}

type StatePublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *StatePublisher) EXPECT() *StatePublisher_Expecter {
	return &StatePublisher_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: _a0
func (_m *StatePublisher) Close(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StatePublisher_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type StatePublisher_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *StatePublisher_Expecter) Close(_a0 interface{}) *StatePublisher_Close_Call {
	return &StatePublisher_Close_Call{Call: _e.mock.On("Close", _a0)}
}

func (_c *StatePublisher_Close_Call) Run(run func(_a0 context.Context)) *StatePublisher_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *StatePublisher_Close_Call) Return(_a0 error) *StatePublisher_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StatePublisher_Close_Call) RunAndReturn(run func(context.Context) error) *StatePublisher_Close_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with no fields
func (_m *StatePublisher) ID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// StatePublisher_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type StatePublisher_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *StatePublisher_Expecter) ID() *StatePublisher_ID_Call {
	return &StatePublisher_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *StatePublisher_ID_Call) Run(run func()) *StatePublisher_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StatePublisher_ID_Call) Return(_a0 string) *StatePublisher_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StatePublisher_ID_Call) RunAndReturn(run func() string) *StatePublisher_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: ctx, state
func (_m *StatePublisher) Publish(ctx context.Context, state *egopb.DurableState) error {
	ret := _m.Called(ctx, state)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *egopb.DurableState) error); ok {
		r0 = rf(ctx, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StatePublisher_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type StatePublisher_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - state *egopb.DurableState
func (_e *StatePublisher_Expecter) Publish(ctx interface{}, state interface{}) *StatePublisher_Publish_Call {
	return &StatePublisher_Publish_Call{Call: _e.mock.On("Publish", ctx, state)}
}

func (_c *StatePublisher_Publish_Call) Run(run func(ctx context.Context, state *egopb.DurableState)) *StatePublisher_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*egopb.DurableState))
	})
	return _c
}

func (_c *StatePublisher_Publish_Call) Return(_a0 error) *StatePublisher_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StatePublisher_Publish_Call) RunAndReturn(run func(context.Context, *egopb.DurableState) error) *StatePublisher_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// NewStatePublisher creates a new instance of StatePublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStatePublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *StatePublisher {
	mock := &StatePublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
