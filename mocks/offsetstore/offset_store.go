// Code generated by mockery. DO NOT EDIT.

package offsetstore

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	egopb "github.com/tochemey/ego/v3/egopb"
)

// OffsetStore is an autogenerated mock type for the OffsetStore type
type OffsetStore struct {
	mock.Mock
}

type OffsetStore_Expecter struct {
	mock *mock.Mock
}

func (_m *OffsetStore) EXPECT() *OffsetStore_Expecter {
	return &OffsetStore_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function with given fields: ctx
func (_m *OffsetStore) Connect(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OffsetStore_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type OffsetStore_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *OffsetStore_Expecter) Connect(ctx interface{}) *OffsetStore_Connect_Call {
	return &OffsetStore_Connect_Call{Call: _e.mock.On("Connect", ctx)}
}

func (_c *OffsetStore_Connect_Call) Run(run func(ctx context.Context)) *OffsetStore_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *OffsetStore_Connect_Call) Return(_a0 error) *OffsetStore_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OffsetStore_Connect_Call) RunAndReturn(run func(context.Context) error) *OffsetStore_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function with given fields: ctx
func (_m *OffsetStore) Disconnect(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Disconnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OffsetStore_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type OffsetStore_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *OffsetStore_Expecter) Disconnect(ctx interface{}) *OffsetStore_Disconnect_Call {
	return &OffsetStore_Disconnect_Call{Call: _e.mock.On("Disconnect", ctx)}
}

func (_c *OffsetStore_Disconnect_Call) Run(run func(ctx context.Context)) *OffsetStore_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *OffsetStore_Disconnect_Call) Return(_a0 error) *OffsetStore_Disconnect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OffsetStore_Disconnect_Call) RunAndReturn(run func(context.Context) error) *OffsetStore_Disconnect_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentOffset provides a mock function with given fields: ctx, projectionID
func (_m *OffsetStore) GetCurrentOffset(ctx context.Context, projectionID *egopb.ProjectionId) (*egopb.Offset, error) {
	ret := _m.Called(ctx, projectionID)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentOffset")
	}

	var r0 *egopb.Offset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *egopb.ProjectionId) (*egopb.Offset, error)); ok {
		return rf(ctx, projectionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *egopb.ProjectionId) *egopb.Offset); ok {
		r0 = rf(ctx, projectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*egopb.Offset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *egopb.ProjectionId) error); ok {
		r1 = rf(ctx, projectionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OffsetStore_GetCurrentOffset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentOffset'
type OffsetStore_GetCurrentOffset_Call struct {
	*mock.Call
}

// GetCurrentOffset is a helper method to define mock.On call
//   - ctx context.Context
//   - projectionID *egopb.ProjectionId
func (_e *OffsetStore_Expecter) GetCurrentOffset(ctx interface{}, projectionID interface{}) *OffsetStore_GetCurrentOffset_Call {
	return &OffsetStore_GetCurrentOffset_Call{Call: _e.mock.On("GetCurrentOffset", ctx, projectionID)}
}

func (_c *OffsetStore_GetCurrentOffset_Call) Run(run func(ctx context.Context, projectionID *egopb.ProjectionId)) *OffsetStore_GetCurrentOffset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*egopb.ProjectionId))
	})
	return _c
}

func (_c *OffsetStore_GetCurrentOffset_Call) Return(currentOffset *egopb.Offset, err error) *OffsetStore_GetCurrentOffset_Call {
	_c.Call.Return(currentOffset, err)
	return _c
}

func (_c *OffsetStore_GetCurrentOffset_Call) RunAndReturn(run func(context.Context, *egopb.ProjectionId) (*egopb.Offset, error)) *OffsetStore_GetCurrentOffset_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: ctx
func (_m *OffsetStore) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OffsetStore_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type OffsetStore_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *OffsetStore_Expecter) Ping(ctx interface{}) *OffsetStore_Ping_Call {
	return &OffsetStore_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *OffsetStore_Ping_Call) Run(run func(ctx context.Context)) *OffsetStore_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *OffsetStore_Ping_Call) Return(_a0 error) *OffsetStore_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OffsetStore_Ping_Call) RunAndReturn(run func(context.Context) error) *OffsetStore_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// ResetOffset provides a mock function with given fields: ctx, projectionName, value
func (_m *OffsetStore) ResetOffset(ctx context.Context, projectionName string, value int64) error {
	ret := _m.Called(ctx, projectionName, value)

	if len(ret) == 0 {
		panic("no return value specified for ResetOffset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) error); ok {
		r0 = rf(ctx, projectionName, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OffsetStore_ResetOffset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetOffset'
type OffsetStore_ResetOffset_Call struct {
	*mock.Call
}

// ResetOffset is a helper method to define mock.On call
//   - ctx context.Context
//   - projectionName string
//   - value int64
func (_e *OffsetStore_Expecter) ResetOffset(ctx interface{}, projectionName interface{}, value interface{}) *OffsetStore_ResetOffset_Call {
	return &OffsetStore_ResetOffset_Call{Call: _e.mock.On("ResetOffset", ctx, projectionName, value)}
}

func (_c *OffsetStore_ResetOffset_Call) Run(run func(ctx context.Context, projectionName string, value int64)) *OffsetStore_ResetOffset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *OffsetStore_ResetOffset_Call) Return(_a0 error) *OffsetStore_ResetOffset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OffsetStore_ResetOffset_Call) RunAndReturn(run func(context.Context, string, int64) error) *OffsetStore_ResetOffset_Call {
	_c.Call.Return(run)
	return _c
}

// WriteOffset provides a mock function with given fields: ctx, offset
func (_m *OffsetStore) WriteOffset(ctx context.Context, offset *egopb.Offset) error {
	ret := _m.Called(ctx, offset)

	if len(ret) == 0 {
		panic("no return value specified for WriteOffset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *egopb.Offset) error); ok {
		r0 = rf(ctx, offset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OffsetStore_WriteOffset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteOffset'
type OffsetStore_WriteOffset_Call struct {
	*mock.Call
}

// WriteOffset is a helper method to define mock.On call
//   - ctx context.Context
//   - offset *egopb.Offset
func (_e *OffsetStore_Expecter) WriteOffset(ctx interface{}, offset interface{}) *OffsetStore_WriteOffset_Call {
	return &OffsetStore_WriteOffset_Call{Call: _e.mock.On("WriteOffset", ctx, offset)}
}

func (_c *OffsetStore_WriteOffset_Call) Run(run func(ctx context.Context, offset *egopb.Offset)) *OffsetStore_WriteOffset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*egopb.Offset))
	})
	return _c
}

func (_c *OffsetStore_WriteOffset_Call) Return(_a0 error) *OffsetStore_WriteOffset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OffsetStore_WriteOffset_Call) RunAndReturn(run func(context.Context, *egopb.Offset) error) *OffsetStore_WriteOffset_Call {
	_c.Call.Return(run)
	return _c
}

// NewOffsetStore creates a new instance of OffsetStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOffsetStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *OffsetStore {
	mock := &OffsetStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
