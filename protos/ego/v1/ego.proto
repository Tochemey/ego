syntax = "proto3";

package actors.v1;

import "google/protobuf/any.proto";

option go_package = "github.com/tochemey/ego/v1;egopb";

// Event defines the event that needs to be persisted onto the events store
message Event {
  // Specifies the persistence unique identifier
  string persistence_id = 1;
  // Specifies the sequence number
  uint64 sequence_number = 2;
  // Specifies the deletion state
  bool is_deleted = 3;
  // the event emitted
  google.protobuf.Any event = 4;
  // the state obtained from processing the event
  google.protobuf.Any resulting_state = 5;
  // Specifies the timestamp
  int64 timestamp = 6;
  // Specifies the shard number
  uint64 shard = 7;
}

// CommandReply specifies the reply to a command sent to
// the aggregate
message CommandReply {
  // the actual command reply
  oneof reply {
    // actual state is wrapped with meta data
    StateReply state_reply = 1;
    // gRPC failure
    ErrorReply error_reply = 2;
    // NoReply
    NoReply no_reply = 3;
  }
}

// StateReply is a command reply.
// This is reply is used when there is a no-op
message StateReply {
  // Specifies the persistence unique identifier
  string persistence_id = 1;
  // the entity state
  google.protobuf.Any state = 2;
  // Specifies the sequence number
  uint64 sequence_number = 3;
  // Specifies the timestamp
  int64 timestamp = 4;
}

// ErrorReply is used when a command processing has
// failed.
message ErrorReply {
  // Specifies the error message
  string message = 1;
}

// NoReply is used when a command does not need a reply
message NoReply {}

// GetStateCommand tells the Aggregate
// to reply with its latest state
message GetStateCommand {}

message Offset {
  // Specifies the persistence unique identifier
  string persistence_id = 1;
  // Specifies the projection name.
  string projection_name = 2;
  // Specifies the current_offset
  // The current offset should match the sequence number of the given event consumed by the
  // projection
  uint64 current_offset = 3;
  // Specifies the timestamp
  int64 timestamp = 4;
}

// ProjectionRecoveryStrategy  is used to recover from unhandled exceptions without causing the projection to fail
enum ProjectionRecoveryStrategy {
  // States that if the first attempt to invoke the handler fails it will immediately give up and fail the projection
  FAIL = 0;
  // States that if he first attempt to invoke the handler fails it will retry invoking the handler with the
  // same envelope this number of `retries` with the `delay` between each attempt. It will give up
  // and fail the projection if all attempts fail. For this to work as expected one need to define the `retries` and `delay`
  // settings in the projection configuration.
  RETRY_AND_FAIL = 1;
  // States that if the first attempt to invoke the handler fails it will immediately give up, discard the envelope and
  // continue with next. This will commit the offset assuming the event has been successfully processed.
  // Use this strategy with care.
  SKIP = 2;
  // States that if he first attempt to invoke the handler fails it will retry invoking the handler with the
  // same envelope this number of `retries` with the `delay` between each attempt. It will give up,
  // discard the element and continue with next if all attempts fail.
  // For this to work as expected one need to define the `retries` and `delay` settings in the projection configuration.
  RETRY_AND_SKIP = 3;
}
